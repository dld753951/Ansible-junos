---
- name: Juniper switch check
  hosts: juniper
  roles:
    - Juniper.junos
  connection: local
  gather_facts: no

  vars:
    val : int()

  tasks:
    - name: Make Config Backup Directory
      local_action:
        module: file
        path: "Backup/{{ lookup('pipe', 'date +%Y%m%d') }}"
        state: directory
        mode: u=rwX,g=rX,o=rX

    - name: Input Check CLI
      juniper_junos_command:
        commands:
          - "show chassis routing-engine"
          - "show chassis environment"
          - "show system alarm"
          - "show system uptime"
          - "show ntp status"
        dest: "Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname}}.txt"

    - name: read file0
      shell: 'cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep "Current time"'
      register: HOST_MGMT0

    - name: Read file1
      shell: "cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt"
      register: HOST_MGMT1

    - name: Alarm check
      debug: msg="{% if 'No alarms currently active' in HOST_MGMT1.stdout %}  ALM state OK {% else %}  ALM state check {% endif %}"
      register: result_alarm
      ignore_errors: True

    - name: NTP check
      debug: msg="{% if 'sync_ntp' in HOST_MGMT1.stdout %}  NTP state OK {% else %}  NTP state check {% endif %}"
      register: result_ntp

    - name: read file2
      shell: 'cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep FPC'
      ignore_errors: True
      register: HOST_MGMT3

    - name: ENV check
      debug: msg="{% if '("Absent" or "Present" or "Failed" or "Check")' in HOST_MGMT3.stdout %}  ENV state check {% else %}  ENV state OK {% endif %}"
      ignore_errors: True
      register: result_env

    - name: read file2-2
      shell: 'cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Fan'
      ignore_errors: True
      register: HOST_MGMT5

    - name: FAN check
      debug: msg="{% if 'Spinning at normal speed' in HOST_MGMT5.stdout %}  FAN state OK {% else %}  FAN state check {% endif %}"
      ignore_errors: True
      register: result_fan

    - name: read file3
      shell: 'cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep "Memory"'
      ignore_errors: True
      register: HOST_MGMT4

    - name: Memory check
      debug: msg="{% if '{{ val }} percent' in HOST_MGMT4.stdout %}  MEM state OK {% else %}  MEM state check {% endif %}"
      when: 'val |int() < 60'
      ignore_errors: True
      register: result_memory

    - name: read file4
      shell: 'cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep "Idle"'
      ignore_errors: True
      register: HOST_MGMT5

    - name: Make Result Directory
      local_action:
        module: file
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        state: directory
        mode: u=rwX,g=rX,o=rX

    - name: Result summary
      local_action:
        copy content="##########_{{ inventory_hostname }}_##########\n{{ HOST_MGMT0.stdout }}\n{{result_alarm}}\n{{ result_ntp }}\n{{ result_env }}\n{{ result_fan }}\n{{ result_memory }}\n\n"
        dest="Result/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.txt"

    - name: Assemble from fragments from a directory
      assemble:
        src: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        dest: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
      ignore_errors: True

    - name: Result modify1
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'msg': u'"
        replace: ""

    - name: Result modify2
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'skip_reason': u'Conditional result was False', 'skipped': True, 'changed': False"
        replace: "skip"

    - name: Result modify3
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'failed': False, 'changed': False"
        replace: ""

    - name: Result modify4
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "',"
        replace: ""
